<%- include("../partials/user/profileHeader") %>

<style>
 /* Base styles */
 body {
   background-color: #ffffff;
 }
 
 .main {
   padding: 20px 0;
 }

 /* Card styles */
 .card-green {
   background-color: #ADD8E6;
 }

 .card {
   border-radius: 10px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
   margin-bottom: 20px;
 }

 .card-header {
   background-color: #487379;
   color: white;
   border-radius: 10px 10px 0 0;
 }

 /* Dashboard menu styles */
 .dashboard-menu {
   background-color: #cce3e6;
   border-radius: 10px;
   padding: 15px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
   margin-bottom: 20px;
 }

 .dashboard-menu .nav-link {
   font-weight: bold;
   color: #30683c;
   box-shadow: 0 4px 10px rgba(123, 131, 112, 0.3), 0 4px 20px rgba(0, 191, 255, 0.2);
   transition: box-shadow 0.3s ease;
   padding: 8px 12px;
   margin-bottom: 5px;
 }

 .dashboard-menu .nav-link:hover {
   color: #00bfff;
   box-shadow: 0 4px 15px rgba(173, 255, 47, 0.5), 0 6px 25px rgba(0, 191, 255, 0.4);
 }

 /* Profile styles */
 .profile-image-container {
   display: flex;
   align-items: center;
 }

 .rounded-circle {
   border-radius: 50%;
   border: 2px solid #fff;
   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
 }

 .ml-3 {
   margin-left: 15px;
 }

 /* Sidebar styles */
 .sidebar {
   background-color: white;
   padding: 20px;
   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
   height: 100%;
   position: sticky;
   top: 20px;
   max-height: calc(100vh - 40px);
   overflow-y: auto;
 }
 
 .sidebar a {
   color: #333;
   display: block;
   padding: 10px 0;
   text-decoration: none;
 }
 
 .sidebar a.active {
   color: #ff6600;
 }
 
 .sidebar a:hover {
   color: #ff6600;
 }
 
 .sidebar a i {
   margin-right: 10px;
 }

 /* Main content styles */
 .main-content {
   background-color: white;
   padding: 20px;
   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
   min-height: 85vh;
 }
 
 .main-content h2 {
   margin-bottom: 20px;
 }

 /* Form styles */
 .form-group label {
   font-weight: bold;
 }
 
 .form-group span {
   color: red;
 }

 /* Button styles */
 .btn-orange {
   background-color: #ff6600;
   color: white;
 }
 
 .btn-orange:hover {
   background-color: #e65c00;
 }
 
 .btn-blue {
   background-color: #0000ff;
   color: white;
 }
 
 .btn-blue:hover {
   background-color: #0000cc;
 }

 /* Photo styles */
 .photo img {
   width: 40px;
   height: 40px;
   border-radius: 50%;
   margin-right: 10px;
 }

 /* Order card styles */
 .order-card {
   border: 1px solid #e0e0e0;
   border-radius: 5px;
   margin-bottom: 20px;
   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
 }
 
 .order-header {
   background-color: #f0f0f0;
   padding: 15px;
   border-top-left-radius: 5px;
   border-top-right-radius: 5px;
 }
 
 .order-body {
   padding: 15px;
   border-bottom: 1px solid #f0f0f0;
 }
 
 .order-footer {
   padding: 10px;
   border-bottom-left-radius: 5px;
   border-bottom-right-radius: 5px;
 }

 .order-status {
   color: red;
 }
 
 .order-ship-to {
   color: green;
 }
 
 .order-link {
   color: blue;
   text-decoration: none;
 }
 
 .order-link:hover {
   text-decoration: underline;
 }

 /* Product image */
 .product-image {
   width: 80px;
   height: 80px;
   object-fit: cover;
   border-radius: 4px;
 }

 /* Pagination */
 .pagination {
   display: flex;
   flex-wrap: wrap;
   gap: 5px;
 }
 
 .pagination .btn {
   padding: 5px 10px;
   margin: 0 2px;
 }
 
 .pagination .btn.active {
   background-color: #007bff;
   color: white;
 }

 /* No orders section */
 .text-center.py-5 {
   padding: 30px 0;
 }

 /* Wrapper for both sidebar and content */
 .page-wrapper {
   display: flex;
   flex-wrap: wrap;
 }

 .sidebar-wrapper {
   width: 100%;
   flex: 0 0 250px;
 }

 .content-wrapper {
   width: 100%;
   flex: 1;
   padding-left: 15px;
 }

 /* Responsive adjustments */
 @media (max-width: 991.98px) {
   .order-header .row .col-md-2,
   .order-header .row .col-md-1,
   .order-header .row .col-md-3 {
     margin-bottom: 10px;
   }
   
   .order-header .text-end {
     text-align: left !important;
     margin-top: 10px;
   }
   
   .sidebar-wrapper {
     flex: 0 0 220px;
   }
 }

 @media (max-width: 767.98px) {
   .dashboard-menu {
     padding: 10px;
   }
   
   .order-header {
     padding: 10px;
   }
   
   .order-body {
     padding: 10px;
   }
   
   .order-header .row > div {
     margin-bottom: 8px;
   }
   
   .col-md-2.text-end {
     display: flex;
     flex-direction: column;
     align-items: flex-start;
     margin-top: 10px;
   }
   
   .product-image {
     width: 60px;
     height: 60px;
     margin-bottom: 10px;
   }
   
   .order-body .row .col-md-2,
   .order-body .row .col-md-6 {
     text-align: center;
   }
   
   .order-body h5 {
     font-size: 16px;
     margin-top: 10px;
   }
   
   .page-wrapper {
     flex-direction: column;
   }
   
   .sidebar-wrapper {
     flex: 0 0 100%;
     margin-bottom: 15px;
   }
   
   .content-wrapper {
     flex: 0 0 100%;
     padding-left: 0;
   }
   
   .sidebar {
     position: relative;
     height: auto;
     max-height: none;
   }
 }

 @media (max-width: 575.98px) {
   .main {
     padding: 10px 0;
   }
   
   .container-fluid {
     padding-left: 10px;
     padding-right: 10px;
   }
   
   .product-image {
     width: 50px;
     height: 50px;
   }
   
   .order-header .row > div {
     text-align: left;
     margin-bottom: 5px;
   }
   
   .small.text-muted {
     font-size: 11px;
   }
   
   .btn {
     padding: 0.25rem 0.5rem;
     font-size: 0.875rem;
   }
   
   .pagination .btn {
     padding: 3px 8px;
     font-size: 0.8rem;
   }
 }
</style>


    
    <!-- Content wrapper - This will contain all your order content -->
    <div class="content-wrapper">
      <div class="main-content">
        <h2 class="mb-3 mt-3">Your Orders</h2>
        
        <!-- Search Form -->
        <div class="py-3">
          <div class="row justify-content-center">
            <div class="col-12">
              <form action="/orderSearch" method="post" class="d-flex flex-wrap">
                <input type="text" id="searchInput" name="query" placeholder="Enter Order ID...." 
                      class="form-control me-2 mb-2 mb-sm-0 flex-grow-1"/>
                <div class="d-flex gap-2">
                  <button type="submit" class="btn btn-secondary">Search</button>
                  <a href="/orders" id="clearButton" class="btn btn-secondary d-flex align-items-center">Clear</a>
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <!-- Orders List -->
        <% if (orders && orders.length > 0) { %>
          <% orders.forEach(order => { %>
            <div class="order-card">
              <div class="order-header">
                <div class="row g-2">
                  <div class="col-6 col-md-2">
                    <small class="text-muted">ORDER PLACED</small><br>
                    <%= new Date(order.createdAt).toLocaleDateString() %>
                  </div>
                  <div class="col-6 col-md-1">
                    <small class="text-muted">TOTAL</small><br>
                    â‚¹<%= Math.round(order.finalAmount) %>
                  </div>
                  <div class="col-12 col-md-3">
                    <small class="text-muted">ORDER ID</small><br>
                    <span class="text-break">#<%= order.orderId %></span>
                  </div>
                  <div class="col-6 col-md-2">
                    <small class="text-muted">ORDER STATUS</small><br>
                    <span class="badge px-2 py-1 text-uppercase fw-semibold 
                        <%= order.status === 'delivered' ? 'bg-success text-white' :
                            order.status === 'cancelled' ? 'bg-danger text-white' :
                            order.status === 'shipped' ? 'bg-info text-dark' :
                            order.status === 'returned' ? 'bg-secondary text-white' :
                            'bg-warning text-dark' %>">
                        <%= order.status %>
                    </span>
                    
                    <% if (order.status === 'delivered') { %>
                      <br><small class="text-muted">On <%= new Date(order.deliveredAt).toLocaleDateString() %></small>
                    <% } %>
                    
                    <% if (order.status === 'returned') { %>
                      <br><small class="text-muted">On <%= new Date(order.updatedAt).toLocaleDateString() %></small>
                    <% } %>
                  </div>
                  
                  <div class="col-6 col-md-2">
                    <small class="text-muted">PAYMENT METHOD</small><br>
                    <% if (order.paymentMethod === 'cod') { %>
                      CASH ON DELIVERY
                    <% } else if (order.paymentMethod === 'online payment' && order.paymentStatus === "Success") { %>
                      ONLINE PAYMENT
                    <% } else if (order.paymentMethod === 'wallet') { %>
                      WALLET PAYMENT
                    <% } else if(order.paymentStatus === "Failed" && order.status != 'cancelled'){ %>
                      <a href="/retryPayment?orderId=<%=order.orderId%>" class="btn btn-primary">Retry Payment</a>
                    <% }else{ %>
                      PAYMENT FAILED
                      <%}%>
                  </div>
                  <div class="col-12 col-md-2 mt-2 mt-md-0 d-flex flex-row flex-md-column gap-2">
                    <a href="/orderDetails?orderId=<%= order.orderId %>" 
                      class="btn btn-outline-primary btn-sm fw-semibold text-uppercase">
                        <i class="bi bi-eye"></i> View Details
                    </a>
                  
                    <% if (order.status === 'delivered' && !order.returnReason && order.requestStatus !== "rejected") { %>
                      <button onclick="initiateReturn('<%= order._id %>')" 
                            class="btn btn-warning btn-sm fw-semibold text-uppercase text-dark">
                        <i class="bi bi-arrow-counterclockwise"></i> Request Return
                      </button>
                    <% } else if (order.status === 'return requested' && order.requestStatus === 'pending') { %>
                      <button onclick="cancelReturn('<%= order._id %>')"
                            class="btn btn-outline-danger btn-sm fw-semibold text-uppercase">
                        <i class="bi bi-x-circle"></i> Cancel Return Request
                      </button>
                    <% } else if (!['delivered', 'cancelled', 'return requested', 'returning', 'returned'].includes(order.status)) { %>
                      <button onclick="cancelOrder('<%= order._id %>')"
                            class="btn btn-outline-danger btn-sm fw-semibold text-uppercase">
                        <i class="bi bi-x-circle"></i> Cancel Order
                      </button>
                    <% } %>
                  </div>
                </div>
              </div>
              
              <% for(let i=0; i < order.orderedItems.length; i++) { %>
              <div class="order-body">
                <div class="row align-items-center">
                  <div class="col-4 col-md-2 text-center">
                    <img src="/uploads/reImage/<%= order.orderedItems[i].product.productImage[0] %>" 
                         alt="<%= order.orderedItems[i].productName %>"
                         class="product-image img-fluid">
                  </div>
                  <div class="col-8 col-md-10">
                    <a href="/details?id=<%= order.orderedItems[i].product._id %>" class="no-style">
                      <h5 class="mb-1"><%= order.orderedItems[i].product.productName %></h5>
                    </a>
                    <p class="text-muted mb-0">Quantity: <%= order.orderedItems[i].quantity %></p>
                    <p class="text-muted mb-0">Price: â‚¹<%= order.orderedItems[i].product.salePrice*order.orderedItems[i].quantity %></p>
                    <%if( ['Processing','Pending'].includes(order.status) && order.orderedItems.length > 1 &&  order.orderedItems[i].productStatus === 'active' && order.paymentStatus != 'Failed'){%>
                    <button class="btn btn-outline-danger btn-sm fw-semibold text-uppercase" onclick="cancelProduct('<%=order._id %>','<%= i%>')">cancel Product</button>
                    <%}%>
                    <%if(order.orderedItems[i].productStatus === 'cancelled'){%>
                      <span class="badge bg-danger text-white">PRODUCT CANCELLED</span>
                      <%}%>
                  </div>
                </div>
              </div>
              <% } %>
            </div>
          <% }); %>
        <% } else { %>
          <div class="text-center py-5">
            <div class="mb-4">
              <i class="fas fa-shopping-bag fa-3x text-muted"></i>
            </div>
            <h3>No orders yet</h3>
            <p class="text-muted">When you place an order, it will appear here.</p>
            <a href="/shop" class="btn btn-primary mt-3">Start Shopping</a>
          </div>
        <% } %>
        
<!-- Pagination -->
<% if (orders && orders.length > 0) { %>
  <div class="pagination d-flex justify-content-center flex-wrap mb-4 gap-1">
    <% if (currentPage > 1) { %>
      <a class="btn btn-secondary" href="/orders?page=<%= currentPage - 1 %>">Prev</a>
    <% } %>
    
    <!-- Always show first page -->
    <a class="btn <%= currentPage === 1 ? 'btn-primary active' : 'btn-outline-secondary' %>" 
       href="/orders?page=1">1</a>
    
    <!-- Show ellipsis after page 1 if necessary -->
    <% if (currentPage > 2 && totalPages > 3) { %>
      <span class="btn btn-outline-secondary disabled">...</span>
    <% } %>
    
    <!-- Show current page if it's not 1 and not the last page -->
    <% if (currentPage !== 1 && currentPage !== totalPages && totalPages > 2) { %>
      <a class="btn btn-primary active" href="/orders?page=<%= currentPage %>"><%= currentPage %></a>
    <% } %>
    
    <!-- Show middle pages or page 2 if appropriate -->
    <% if (totalPages === 2) { %>
      <a class="btn <%= currentPage === 2 ? 'btn-primary active' : 'btn-outline-secondary' %>" 
         href="/orders?page=2">2</a>
    <% } else if (totalPages > 2 && currentPage !== 2 && currentPage !== totalPages - 1) { %>
      <!-- This condition avoids duplicate buttons when on first or last page -->
      <% if (totalPages > 3 || (currentPage !== 1 && currentPage !== totalPages)) { %>
        <% if (currentPage < totalPages - 1 && totalPages > 3) { %>
          <span class="btn btn-outline-secondary disabled">...</span>
        <% } %>
      <% } %>
    <% } %>

    <% if (totalPages > 2) { %>
      <a class="btn <%= currentPage === totalPages ? 'btn-primary active' : 'btn-outline-secondary' %>" 
         href="/orders?page=<%= totalPages %>"><%= totalPages %></a>
    <% } %>
    
    <% if (currentPage < totalPages) { %>
      <a class="btn btn-secondary" href="/orders?page=<%= currentPage + 1 %>">Next</a>
    <% } %>
  </div>
<% } %>
      </div>
    </div>
  </div>
</div>

<!-- Return Modal -->
<div class="modal fade" id="returnModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header py-2">
        <h5 class="modal-title">Return Request</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-3">
        <form id="returnForm" class="needs-validation w-100" novalidate>
          <div class="mb-2">
            <label for="returnReason" class="form-label small mb-1">Return Reason Category</label>
            <select class="form-select form-select-sm w-100" id="returnReason" required>
              <option value="">Select a reason</option>
              <option value="Wrong size">Wrong size</option>
              <option value="Damaged product">Damaged product</option>
              <option value="Not as described">Not as described</option>
              <option value="Quality issues">Quality issues</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="mb-2">
            <label for="returnDescription" class="form-label small mb-1">Detailed Description</label>
            <textarea class="form-control form-control-sm w-100" id="returnDescription" rows="2" placeholder="Please provide more details about your return reason..." required></textarea>
            <small class="text-muted d-block mt-1 small">Please explain the issue in detail.</small>
          </div>
          <div class="mb-2">
            <label for="returnImages" class="form-label small mb-1">Upload Images (Optional)</label>
            <input type="file" class="form-control form-control-sm w-100" id="returnImages" multiple accept="image/*">
            <small class="text-muted d-block mt-1 small">You can upload up to 3 images</small>
          </div>
        </form>
      </div>
      <div class="modal-footer py-2">
        <button type="button" class="btn btn-sm btn-danger" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-sm btn-primary" onclick="submitReturn()">Submit Return</button>
      </div>
    </div>
  </div>
</div>

<!-- SweetAlert2 for dialogs -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-Gn5384xqQ1aoWXA+058RXPXfg6Nv6JCzF5ZC8EG5fAwIQ9k/rwZV+YFf5Xq5drFQ" crossorigin="anonymous"></script>

<script>
let currentOrderId = null;

function initiateReturn(orderId) {
  currentOrderId = orderId;
  const modal = new bootstrap.Modal(document.getElementById('returnModal'));
  modal.show();
}

document.getElementById('returnReason').addEventListener('change', function() {
  const otherReasonDiv = document.getElementById('otherReasonDiv');
  if (this.value === 'Other') {
    otherReasonDiv?.classList.remove('d-none');
  } else {
    otherReasonDiv?.classList.add('d-none');
  }
});

async function submitReturn() {
  try {
    const reasonSelect = document.getElementById('returnReason');
    const returnDescription = document.getElementById('returnDescription');
    const imagesInput = document.getElementById('returnImages');
    
    const returnReason = reasonSelect.value;
    const description = returnDescription.value;

    if (!returnReason || !description) {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Please select a reason category and provide a detailed description!',
      });
      return;
    }

    const formData = new FormData();
    formData.append('orderId', currentOrderId);
    formData.append('returnReason', returnReason);
    formData.append('returnDescription', description);

    const files = imagesInput.files;
    for (let i = 0; i < Math.min(files.length, 3); i++) {
      formData.append('images', files[i]);
    }

    const response = await fetch('/return', {
      method: 'POST',
      body: formData
    });

    const data = await response.json();
    
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Return request submitted successfully!',
        confirmButtonText: 'OK'
      }).then(() => {
        location.reload();
      });
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: error.message || 'Failed to submit return request',
    });
  }
}

async function cancelReturn(orderId) {
  try {
    const result = await Swal.fire({
      title: 'Cancel Return Request',
      text: 'Are you sure you want to cancel your return request?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, cancel it!'
    });

    if (result.isConfirmed) {
      const response = await fetch('/cancelReturnRequest', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ orderId }),
      });

      const data = await response.json();
      
      if (data.success) {
        await Swal.fire({
          icon: 'success',
          title: 'Success',
          text: 'Return request cancelled successfully',
          timer: 1500
        });
        location.reload();
      } else {
        throw new Error(data.message);
      }
    }
  } catch (error) {
    console.error('Error:', error);
    await Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Failed to cancel return request'
    });
  }
}

async function cancelOrder(orderId) {
  const { value: reasonOption } = await Swal.fire({
    title: 'Cancel Order',
    input: 'select',
    inputLabel: 'Select a reason for cancellation',
    inputOptions: {
      'Ordered by mistake': 'Ordered by mistake',
      'Found a better price': 'Found a better price',
      'Delivery took too long': 'Delivery took too long',
      'Item no longer needed': 'Item no longer needed',
      'Changed my mind': 'Changed my mind',
      'Wrong item ordered': 'Wrong item ordered',
      'Other': 'Other'
    },
    showCancelButton: true
  });

  if (!reasonOption) return;

  let finalReason = reasonOption;

  if (reasonOption === 'Other') {
    const { value: otherReason } = await Swal.fire({
      title: 'Cancel Order',
      input: 'textarea',
      inputLabel: 'Please provide a reason for cancellation',
      inputPlaceholder: 'Type your reason here...',
      showCancelButton: true,
      inputValidator: (value) => {
        if (!value) {
          return 'You need to provide a reason!';
        }
      }
    });

    if (!otherReason) return;
    finalReason = otherReason;
  }

  try {
    const response = await fetch('/cancelOrder', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ orderId, reason: finalReason }),
    });

    const data = await response.json();

    if (data.success) {
      await Swal.fire({
        icon: 'success',
        title: 'Success',
        text: 'Order cancelled successfully',
        timer: 1500
      });
      location.reload();
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    console.error('Error:', error);
    await Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Failed to cancel order'
    });
  }
}




async function cancelProduct(orderId,index){

  const { value: reasonOption } = await Swal.fire({
    title: 'Cancel Order',
    input: 'select',
    inputLabel: 'Select a reason for cancellation',
    inputOptions: {
      'Ordered by mistake': 'Ordered by mistake',
      'Found a better price': 'Found a better price',
      'Item no longer needed': 'Item no longer needed',
      'Changed my mind': 'Changed my mind',
      'Wrong item ordered': 'Wrong item ordered',
      'Other': 'Other'
    },
    showCancelButton: true
  });

  if (!reasonOption) return;

  let finalReason = reasonOption;

  if (reasonOption === 'Other') {
    const { value: otherReason } = await Swal.fire({
      title: 'Cancel Order',
      input: 'textarea',
      inputLabel: 'Please provide a reason for cancellation',
      inputPlaceholder: 'Type your reason here...',
      showCancelButton: true,
      inputValidator: (value) => {
        if (!value) {
          return 'You need to provide a reason!';
        }
      }
    });

    if (!otherReason) return;
    finalReason = otherReason;
  }

  try {
    const response = await fetch('/cancelProduct', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ orderId, index,reason: finalReason }),
    });

    const data = await response.json();

    if (data.success) {
      await Swal.fire({
        icon: 'success',
        title: 'Success',
        text: 'Product cancelled successfully',
        timer: 1500
      });
      location.reload();
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    console.error('Error:', error);
    await Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Failed to cancel Product'
    });
  }
}
</script>