<%- include("../partials/admin/sidebar") %>
<head>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"
  />
  <style>
    .col-md-3 {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin: 10px;
    }

    .form-label {
      margin-bottom: 8px;
    }

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    .d-grid {
      margin-top: 20px;
    }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    .pagination-container {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  .page-link {
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 5px;
    text-decoration: none;
    color: #007bff;
    transition: all 0.3s ease-in-out;
  }

  .page-link:hover {
    background-color: #007bff;
    color: #fff;
  }

  .page-link.active {
    background-color: #007bff;
    color: #fff;
    font-weight: bold;
    border-color: #007bff;
  }

    .error-message {
      color: red;
    }
    
/* Optional custom styles to enhance the bootstrap cards */
.card {
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  border-radius: 8px;
  overflow: hidden;
  border: 1px solid rgba(0,0,0,0.08);
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
}

.card-header {
  background-color: transparent;
  border-bottom: 1px solid rgba(0,0,0,0.05);
  padding: 1rem 1.25rem;
}

.badge {
  font-weight: 500;
  padding: 0.5em 0.75em;
}

.btn-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
}

.card-footer {
  padding: 1rem 1.25rem;
}
.description-container {
  max-width: 100%; /* Ensures it stays inside the card */
  white-space: normal; /* Allows text to wrap naturally */
  word-wrap: break-word; /* Breaks long words if necessary */
  overflow-wrap: break-word; /* Ensures text wraps instead of overflowing */
  display: block; /* Ensures proper block-level behavior */
}

 </style>
</head>
<body>
  <section class="content-main container-fluid">
    <div class="content-header text-center mb-4 mt-4">
      <h2 class="content-title card-title text-dark"><strong>Category</strong></h2>
    </div>
    
    <header class="card-header text-center mb-4">
      <div class="d-flex flex-wrap justify-content-center align-items-center gap-3">
        <form action="/admin/category/" method="get" class="d-inline w-auto">
          <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="max-width: 500px;">
            <input
              type="text"
              class="form-control border-0 rounded-pill"
              placeholder="Search categories"
              name="search"
              value="<%= searchQuery %>"
              id="searchInput" 
            />
            <button class="btn border-0" type="submit">
              <i class="fas fa-search fa-fw"></i>
            </button>
            <a href="/admin/category" class="btn btn-secondary btn-sm rounded-pill ms-2 d-none" id="clearButton">Clear</a>
          </div>
        </form>
        
        <button
          class="btn btn-primary px-4 py-2"
          data-bs-toggle="modal"
          data-bs-target="#addCategoryModal"
        >
          Add Category
        </button>
      </div>
    </header>
  
    <!-- Add Category Modal -->
    <div
      class="modal fade"
      id="addCategoryModal"
      tabindex="-1"
      aria-labelledby="addCategoryModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <!-- Modal Header -->
          <div class="modal-header">
            <h5 class="modal-title" id="addCategoryModalLabel">
              Add Category
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
  
          <!-- Modal Body -->
          <div class="modal-body">
            <form id="addCategoryForm">
              <div class="mb-4">
                <label for="addCategoryName" class="form-label fw-medium"
                  >Name</label
                >
                <input
                  type="text"
                  name="name"
                  id="addCategoryName"
                  class="form-control"
                  placeholder="Enter category name"
                />
                <div id="nameError" class="text-danger small mt-1"></div>
              </div>
  
              <div class="mb-4">
                <label class="form-label fw-medium">Description</label>
                <textarea
                  name="description"
                  id="addCategoryDescription"
                  class="form-control"
                  rows="4"
                  placeholder="Enter category description"
                ></textarea>
                <div
                  id="descriptionError"
                  class="text-danger small mt-1"
                ></div>
              </div>
            </form>
          </div>
  
          <!-- Modal Footer -->
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-outline-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="submitAddCategoryForm()"
            >
              Add Category
            </button>
          </div>
        </div>
      </div>
    </div>
  
    <div class="container-fluid py-4">
      <div class="row justify-content-center">
        <%cat.reverse().forEach((category,index)=>{%>
        <div class="col-12 mb-3">
          <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="card-title mb-0 text-dark"><strong><%=category.name%></strong></h5>
              <div>
                <%if(category.isListed){%>
                <span class="badge bg-success">Listed</span>
                <%}else{%>
                <span class="badge bg-danger">Unlisted</span>
                <%}%>
              </div>
            </div>
            <div class="card-body py-2">
              <p class="card-text text-muted text-dark text-wrap">
                <strong>Description:</strong> <span class="d-block"><%= category.description %></span>
              </p>
              
              
              <div class="d-flex align-items-center mb-3">
                <span class="fw-bold me-2">Offer:</span>
                <span class="fs-5">
                  <%if(category.categoryOffer){%>
                  <span class="text-primary"><%=category.categoryOffer%>%</span>
                  <%} else{%>
                  <span class="text-secondary">0%</span>
                  <%}%>
                </span>
              </div>
            </div>
            <div class="card-footer bg-white border-top-0 py-2">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <%if(!category.categoryOffer || category.categoryOffer === 0){%>
                  <button class="btn btn-info text-white btn-sm " onclick="addOffer('<%=category._id%>')">Add Offer</button>
                  <%}else{%>
                  <button class="btn btn-warning text-white btn-sm " onclick="removeOffer('<%=category._id%>')">Remove Offer</button>
                  <%}%>
                </div>
                
                <div class="d-flex gap-2">
                  <%if(category.isListed){%>
                  <a href="/admin/listCategory?id=<%=category._id%>" class="btn btn-danger btn-sm">Unlist</a>
                  <%}else{%>
                  <a href="/admin/unlistCategory?id=<%=category._id%>" class="btn btn-success btn-sm">List</a>
                  <%}%>
                  
                  <button 
                    class="btn btn-info text-white btn-sm " 
                    data-bs-toggle="modal" 
                    data-bs-target="#editCategoryModal" 
                    onclick="loadEditCategory('<%=category._id%>')">
                    Edit
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <%})%>
      </div>
    </div>
    <div class="pagination-container d-flex justify-content-center mt-4">
      <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>&search=<%= searchQuery %>" class="page-link">&laquo; Previous</a>
      <% } %>
    
      <% for (let i = 1; i <= totalPages; i++) { %>
        <% if (i === currentPage) { %>
          <span class="page-link active"><%= i %></span>
        <% } else { %>
          <a href="?page=<%= i %>&search=<%= searchQuery %>" class="page-link"><%= i %></a>
        <% } %>
      <% } %>
    
      <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>&search=<%= searchQuery %>" class="page-link">Next &raquo;</a>
      <% } %>
    </div>
  
    <!-- Edit Category Modal -->
    <div
      class="modal fade"
      id="editCategoryModal"
      tabindex="-1"
      aria-labelledby="editCategoryModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <!-- Modal Header -->
          <div class="modal-header">
            <h5 class="modal-title" id="editCategoryModalLabel">
              Edit Category
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
  
          <!-- Modal Body -->
          <div class="modal-body">
            <form id="editCategoryForm">
              <div class="mb-4">
                <label for="editCategoryName" class="form-label fw-medium"
                  >Name</label
                >
                <input
                  type="text"
                  name="categoryName"
                  id="editCategoryName"
                  class="form-control"
                  placeholder="Enter category name"
                />
                <div id="nameError" class="text-danger small mt-1"></div>
              </div>
  
              <div class="mb-4">
                <label class="form-label fw-medium">Description</label>
                <textarea
                  name="description"
                  id="editCategoryDescription"
                  class="form-control"
                  rows="4"
                  placeholder="Enter category description"
                ></textarea>
                <div id="descriptionError" class="text-danger small mt-1"></div>
              </div>
            </form>
          </div>
  
          <!-- Modal Footer -->
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-outline-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="submitEditCategoryForm()"
            >
              Update Category
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

  <script>
    async function addOffer(categoryId) {
      const { value: percentage } = await Swal.fire({
        title: "Add Offer Percentage",
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: "Enter percentage (e.g., 10 for 10%)",
        inputAttributes: {
          min: 1,
          max: 100,
        },
        showCancelButton: true,
        confirmButtonText: "Add Offer",
        cancelButtonText: "Cancel",
        inputValidator: (value) => {
          if (!value || value < 1 || value > 100) {
            return "Please enter a valid percentage between 1 and 100";
          }
        },
      });

      if (percentage) {
        try {
          const response = await fetch("/admin/addCategoryOffer", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              percentage: percentage,
              categoryId: categoryId,
            }),
          });

          const data = await response.json();

          if (response.ok && data.status === true) {
            Swal.fire(
              "Offer Added",
              `The offer of ${percentage}% has been added successfully.`,
              "success"
            ).then(() => {
              location.reload();
            });
          } else {
            Swal.fire(
              "Failed",
              data.message || "Failed to add the offer.",
              "error"
            );
          }
        } catch (error) {
          Swal.fire(
            "Error",
            "An error occurred while adding the offer.",
            "error"
          );
          console.error("Error adding offer:", error);
        }
      }
    }

    async function removeOffer(categoryId) {
      try {
        const response = await fetch("/admin/removeCategoryOffer", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            categoryId: categoryId,
          }),
        });

        const data = await response.json();

        if (response.ok && data.status === true) {
          Swal.fire(
            "Offer Removed",
            "The offer has been removed successfully.",
            "success"
          ).then(() => {
            location.reload();
          });
        } else {
          Swal.fire(
            "Failed",
            data.message || "Failed to remove the offer.",
            "error"
          );
        }
      } catch (error) {
        Swal.fire(
          "Error",
          "An error occurred while removing the offer.",
          "error"
        );
        console.error("Error removing offer:", error);
      }
    }

    // Function to load category data into the modal
    async function loadEditCategory(categoryId) {
      try {
        const response = await fetch(`/admin/editCategory?id=${categoryId}`);
        const data = await response.json();

        if (data.status === true) {
          // Populate the modal form with category data
          document.getElementById("editCategoryName").value =
            data.category.name;
          document.getElementById("editCategoryDescription").value =
            data.category.description;

          // Set the form action URL
          document.getElementById(
            "editCategoryForm"
          ).action = `/admin/editCategory/${categoryId}`;
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message,
          });
        }
      } catch (error) {
        console.error("Error loading category data:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An error occurred while loading category data.",
        });
      }
    }

    // Reusable SweetAlert function
    function showSweetAlert(
      icon,
      title,
      text,
      timer = 1500,
      showConfirmButton = false
    ) {
      return Swal.fire({
        icon,
        title,
        text,
        timer,
        showConfirmButton,
      });
    }

    // Reusable modal close function
    function closeModalAndReload(modalId) {
      const modal = bootstrap.Modal.getInstance(
        document.getElementById(modalId)
      );
      modal.hide();
      location.reload();
    }

    // Reusable error handler
    function handleError(error, defaultMessage = "An error occurred.") {
      console.error("Error:", error);
      showSweetAlert("error", "Error", defaultMessage);
    }

    // Function to validate the form
    function validateForm(formId, nameFieldName) {
      const form = document.getElementById(formId);
      const nameInput = form.querySelector(`input[name="${nameFieldName}"]`);
      const descriptionInput = form.querySelector(
        'textarea[name="description"]'
      );
      const nameError = form.querySelector("#nameError");
      const descriptionError = form.querySelector("#descriptionError");

      let isValid = true;

      // Reset error messages
      nameError.textContent = "";
      descriptionError.textContent = "";

      // Validate name
      const nameRegex = /^[A-Za-z\s]+$/;
      if (!nameInput.value.trim()) {
        nameError.textContent = "Name is required.";
        isValid = false;
      } else if (!nameRegex.test(nameInput.value.trim())) {
        nameError.textContent =
          "Name should only contain alphabets and spaces.";
        isValid = false;
      }

      // Validate description
      if (!descriptionInput.value.trim()) {
        descriptionError.textContent = "Description is required.";
        isValid = false;
      }

      return isValid;
    }

    // Function to submit the edit category form
    async function submitEditCategoryForm() {
      const form = document.getElementById("editCategoryForm");
      const formData = new FormData(form);
      const url = form.action;

      // Validate the form
      if (!validateForm("editCategoryForm", "categoryName")) {
        return;
      }

      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            categoryName: formData.get("categoryName"),
            description: formData.get("description"),
          }),
        });

        const data = await response.json();

        if (data.status === true) {
          await showSweetAlert("success", "Success", data.message).then(() => {
            closeModalAndReload("editCategoryModal");
          });
        } else {
          showSweetAlert("error", "Error", data.message);
        }
      } catch (error) {
        handleError(error, "An error occurred while updating the category.");
      }
    }

    // Function to submit the add category form
    async function submitAddCategoryForm() {
      const form = document.getElementById("addCategoryForm");
      const formData = new FormData(form);

      // Validate the form
      if (!validateForm("addCategoryForm", "name")) {
        return;
      }

      try {
        const response = await fetch("/admin/addCategory", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: formData.get("name"),
            description: formData.get("description"),
          }),
        });

        const data = await response.json();

        if (response.ok) {
          await showSweetAlert("success", "Success", data.message).then(() => {
            closeModalAndReload("addCategoryModal");
          });
        } else {
          showSweetAlert("error", "Error", data.error);
        }
      } catch (error) {
        handleError(error, "An error occurred while adding the category.");
      }
    }



    document.addEventListener("DOMContentLoaded", function () {
  const searchInput = document.getElementById("searchInput");
  const clearButton = document.getElementById("clearButton");

  // Show/hide the clear button based on the search input value
  searchInput.addEventListener("input", function () {
    if (searchInput.value.trim() !== "") {
      clearButton.classList.remove("d-none");
    } else {
      clearButton.classList.add("d-none");
    }
  });

  // Show the clear button if a search query is present in the URL
  if (new URLSearchParams(window.location.search).has("search")) {
    clearButton.classList.remove("d-none");
  }

  // Clear the search input and redirect to the category page
  clearButton.addEventListener("click", function (event) {
    event.preventDefault(); // Prevent the default link behavior
    window.location.href = "/admin/category"; // Redirect to the category page without the search query
  });
});
  </script>
</body>
<%- include("../partials/admin/footer") %>
