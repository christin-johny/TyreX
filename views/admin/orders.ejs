<%- include("../partials/admin/sidebar") %>

<style>
   :root {
      --primary-color: #1e90ff;
      --secondary-color: #2d3436;
      --success-color: #00b894;
      --danger-color: #d63031;
      --info-color: #0984e3;
      --light-gray: #dfe6e9;
      --background-color: #f5f6fa;
      --white: #ffffff;
      --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
      --transition: all 0.3s ease;
    }
    .order-table th, .order-table td {
        vertical-align: middle;
    }
    .status-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-weight: 500;
    }
    .order-actions .btn {
        margin: 0 2px;
    }
</style>

<div class="container-fluid px-4">
    <h1 class="mt-4">Order Management</h1>
    <form method="GET" action="/admin/orders" class="mb-4 p-3 bg-light rounded shadow-sm">
        <div class="row g-2 align-items-center">
            <!-- Search Input -->
            <div class="col-md-4">
                <div class="input-group">
                    <input type="text" name="search" class="form-control border-primary" placeholder="Search Order ID or Name" value="<%= search %>">
                    <button type="submit" name="action" value="search" class="btn btn-primary">Search</button>
                </div>
            </div>
    
            <!-- Status Filter -->
            <div class="col-md-3">
                <select name="status" class="form-select border-primary custom-select">
                    <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Status</option>
                    <option value="returned" <%= status === 'Returned' ? 'selected' : '' %>>Returned</option>
                    <option value="Processing" <%= status === 'Processing' ? 'selected' : '' %>>Processing</option>
                    <option value="Shipped" <%= status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="delivered" <%= status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="cancelled" <%= status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                </select>
            </div>
    
            <!-- Sorting Options -->
            <div class="col-md-2">
                <select name="sortField" class="form-select border-primary custom-select">
                    <option value="createdAt" <%= sortField === 'createdAt' ? 'selected' : '' %>>Date</option>
                    <option value="finalAmount" <%= sortField === 'finalAmount' ? 'selected' : '' %>>Price</option>
                </select>
            </div>
            <div class="col-md-2">
                <select name="sortOrder" class="form-select border-primary custom-select">
                    <option value="desc" <%= sortOrder === -1 ? 'selected' : '' %>>Descending</option>
                    <option value="asc" <%= sortOrder === 1 ? 'selected' : '' %>>Ascending</option>
                </select>
            </div>
    
            <!-- Filter and Clear Buttons -->
            <div class="col-md-1 d-grid">
                <button type="submit" class="btn btn-success">Filter</button>
            </div>
            <div class="col-md-1 d-grid mt-3">
                <button type="button" class="btn btn-secondary" onclick="clearFilters()">Clear</button>
            </div>
        </div>
    </form>
    
    <script>
        function clearFilters() {
            window.location.href = "/admin/orders";
        }
    </script>
    
    <style>
        .custom-select {
            background-color: #fff;
            color: #333;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease-in-out;
        }
        
        .custom-select:focus {
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
            border-color: #007bff;
        }
    
        .form-control {
            border-radius: 8px;
        }
    
        .btn {
            border-radius: 8px;
        }
    
        .form-control:focus, .custom-select:focus {
            outline: none;
        }
    
        .input-group .btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    </style>
    
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            All Orders
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped order-table">
                    <thead class="text-center">
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr class="align-middle">
                                <td><%= order.orderId %></td>
                                <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                                <td>
                                    <div>
                                        <strong><%= order.userId.name %></strong>
                                    </div>
                                </td>
                                <td>â‚¹<%= Math.round(order.finalAmount) %></td>
                                <td>
                                    <div>
                                        <span class=" text-white  status-badge d-inline-block px-2 py-1 rounded <%= 
                                            order.status === 'delivered' ? 'bg-success text-white' :
                                            order.status === 'cancelled' ? 'bg-danger text-white' :
                                            order.status === 'shipped' ? 'bg-info text-white' :
                                            order.status === 'return requested' ? 'bg-warning text-dark' :
                                            order.status === 'returning' ? 'bg-info text-white' :
                                            order.status === 'returned' ? 'bg-secondary text-white' :
                                            'bg-warning text-dark'
                                        %>">
                                            <%= order.status.toUpperCase() %>
                                        </span>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <a href="/admin/adminOrders/<%= order._id %>" class="btn btn-primary btn-sm">
                                        View Details
                                    </a>
                                    
                                    <% if (order.status === 'return requested' && order.requestStatus === 'pending') { %>
                                        <div class="btn-group mt-2">
                                            <button onclick="handleReturn('approved', '<%= order._id %>')" 
                                                    class="btn btn-success btn-sm">
                                                Approve Return
                                            </button>
                                            <button onclick="handleReturn('rejected', '<%= order._id %>')" 
                                                    class="btn btn-danger btn-sm">
                                                Reject
                                            </button>
                                        </div>
                                    <% } else if (order.requestStatus === 'approved' && order.status != 'returned') { %>
                                        <button onclick="updateReturnStatus('<%= order._id %>')" 
                                                class="btn btn-info btn-sm mt-2">
                                            Update Return Status
                                        </button>
                                    <% } else if (!['cancelled', 'delivered', 'returned', 'return requested', 'returning'].includes(order.status)) { %>
                                        <div class="mt-2">
                                            <button onclick="updateStatus('<%= order._id %>')" 
                                                    class="btn btn-info btn-sm">
                                                Update Status
                                            </button>
                                            <button onclick="cancelOrder('<%= order._id %>')" 
                                                    class="btn btn-danger btn-sm">
                                                Cancel
                                            </button>
                                        </div>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
                
            </div>
        </div>
    </div>
    <div class="pagination-container d-flex justify-content-center mt-4 mb-4">
        <nav aria-label="Page navigation">
          <ul class="pagination pagination-sm flex-wrap">
            <% if (currentPage > 1) { %>
            <li class="page-item">
              <a href="?page=<%= currentPage - 1 %>" class="page-link">&laquo; Previous</a>
            </li>
            <% } %>
            <% for (let i = 1; i <= totalPages; i++) { %>
              <% if (i === currentPage) { %>
                <li class="page-item active">
                  <span class="page-link"><%= i %></span>
                </li>
              <% } else { %>
                <li class="page-item">
                  <a href="?page=<%= i %>" class="page-link"><%= i %></a>
                </li>
              <% } %>
            <% } %>
            <% if (currentPage < totalPages) { %>
            <li class="page-item">
              <a href="?page=<%= currentPage + 1 %>" class="page-link">Next &raquo;</a>
            </li>
            <% } %>
          </ul>
        </nav>
      </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Rejection Category</label>
                    <select class="form-select" id="rejectionCategory" required>
                        <option value="">Select a category</option>
                        <option value="Invalid reason">Invalid reason</option>
                        <option value="Outside return window">Outside return window</option>
                        <option value="Product condition">Product condition</option>
                        <option value="Policy violation">Policy violation</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Detailed Explanation</label>
                    <textarea class="form-control" id="rejectionReason" rows="3" placeholder="Please provide a detailed explanation for rejecting the return request..." required></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
            </div>
        </div>
        
    </div>
    
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let currentOrderId = null;

async function updateStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'confirmed': 'Confirmed',
            'shipped': 'Shipped',
            'delivered': 'delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/updateStatus', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}

async function cancelOrder(orderId) {
    const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch('/admin/orderCancel', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order cancelled successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to cancel order'
            });
        }
    }
}

async function handleReturn(action, orderId) {
    currentOrderId = orderId;
    
    if (action === 'rejected') {
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
        return;
    }

    if (action === 'approved') {
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to approve this return request!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, approve it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch('/admin/handleReturn', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            action: action
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire(
                            'Approved!',
                            'Return request has been approved.',
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire(
                        'Error!',
                        error.message || 'Failed to approve return request',
                        'error'
                    );
                }
            }
        });
    }
}

async function submitRejection() {
    const category = document.getElementById('rejectionCategory').value;
    const reason = document.getElementById('rejectionReason').value;
    
    if (!category || !reason) {
        alert('Please select a category and provide a detailed explanation');
        return;
    }

    try {
        const response = await fetch('/admin/handleReturn', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                action: 'rejected',
                category: category,
                message: reason
            })
        });

        const data = await response.json();
        
        if (data.success) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
            modal.hide();
            Swal.fire(
                'Rejected!',
                'Return request has been rejected.',
                'success'
            ).then(() => {
                location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire(
            'Error!',
            error.message || 'Failed to reject return request',
            'error'
        );
    }
}

async function updateReturnStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Return Status',
        input: 'select',
        inputOptions: {
            'returning': 'returning',
            'returned': 'returned'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/updateReturnStatus', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}
</script>

<%- include("../partials/admin/footer") %>